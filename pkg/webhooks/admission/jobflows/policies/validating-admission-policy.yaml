apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicy
metadata:
  name: jobflow-validation-policy
  labels:
    volcano.sh/component: jobflow-webhook
    volcano.sh/migration: vap
spec:
  failurePolicy: Fail
  matchConstraints:
  - resourceRules:
    - operations: ["CREATE", "UPDATE"]
      apiGroups: ["flow.volcano.sh"]
      apiVersions: ["v1alpha1"]
      resources: ["jobflows"]
  variables:
  - name: flows
    expression: "has(object.spec.flows) ? object.spec.flows : []"
  - name: flowNames
    expression: "variables.flows.map(flow, flow.name)"
  validations:
  # 1. Basic Structure Validation - At least one flow required
  - expression: "size(variables.flows) > 0"
    message: "JobFlow must have at least one flow"
    reason: Invalid
  
  # 2. Flow Name Uniqueness - All flow names must be unique
  - expression: "size(variables.flowNames) == size(variables.flowNames.unique())"
    message: "JobFlow flow names must be unique"
    reason: Invalid
  
  # 3. Flow Name Required - Each flow must have a non-empty name
  - expression: |
      variables.flows.all(flow,
        has(flow.name) && size(flow.name) > 0
      )
    message: "Each flow must have a non-empty name"
    reason: Invalid
  
  # 4. Valid Dependency References - Dependencies must reference existing flows
  - expression: |
      variables.flows.all(flow,
        !has(flow.dependsOn) || 
        !has(flow.dependsOn.targets) ||
        flow.dependsOn.targets.all(target, target in variables.flowNames)
      )
    message: "Flow dependencies must reference existing flow names"
    reason: Invalid
  
  # 5. No Self-Dependencies - A flow cannot depend on itself
  - expression: |
      variables.flows.all(flow,
        !has(flow.dependsOn) || 
        !has(flow.dependsOn.targets) ||
        !(flow.name in flow.dependsOn.targets)
      )
    message: "Flow cannot depend on itself"
    reason: Invalid
  
  # 6. Direct Cycle Detection - Simple A->B->A cycle detection
  - expression: |
      variables.flows.all(flowA,
        !has(flowA.dependsOn) || 
        !has(flowA.dependsOn.targets) ||
        !flowA.dependsOn.targets.exists(targetB,
          variables.flows.exists(flowB,
            flowB.name == targetB &&
            has(flowB.dependsOn) &&
            has(flowB.dependsOn.targets) &&
            flowA.name in flowB.dependsOn.targets
          )
        )
      )
    message: "Direct circular dependencies detected between flows"
    reason: Invalid
  
  # 7. Root Flow Validation - At least one flow must have no dependencies (root)
  - expression: |
      variables.flows.exists(flow,
        !has(flow.dependsOn) || 
        !has(flow.dependsOn.targets) ||
        size(flow.dependsOn.targets) == 0
      )
    message: "JobFlow must have at least one root flow (flow with no dependencies)"
    reason: Invalid
  
  # 8. Empty Dependency Targets Validation
  - expression: |
      variables.flows.all(flow,
        !has(flow.dependsOn) || 
        !has(flow.dependsOn.targets) ||
        size(flow.dependsOn.targets) > 0
      )
    message: "Flow dependsOn.targets cannot be empty when dependsOn is specified"
    reason: Invalid

---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: jobflow-validation-policy-binding
  labels:
    volcano.sh/component: jobflow-webhook
    volcano.sh/migration: vap
spec:
  policyName: jobflow-validation-policy
  validationActions: [Warn] # Start with Warn for gradual migration
  matchResources:
    namespaceSelector:
      matchExpressions:
      - key: name
        operator: NotIn
        values: ["kube-system", "kube-public", "kube-node-lease"]