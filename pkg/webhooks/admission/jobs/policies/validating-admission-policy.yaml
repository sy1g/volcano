apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicy
metadata:
  name: job-validation-policy
  labels:
    volcano.sh/component: job-webhook
    volcano.sh/migration: vap
spec:
  failurePolicy: Fail
  matchConstraints:
  - resourceRules:
    - operations: ["CREATE", "UPDATE"]
      apiGroups: ["batch.volcano.sh"]
      apiVersions: ["v1alpha1"]
      resources: ["jobs"]
  variables:
  - name: tasks
    expression: "has(object.spec.tasks) ? object.spec.tasks : []"
  - name: taskNames
    expression: "variables.tasks.map(task, task.name)"
  validations:
  # 1. Basic Field Validations - Non-negative values
  - expression: "!has(object.spec.minAvailable) || object.spec.minAvailable >= 0"
    message: "job 'minAvailable' must be >= 0"
    reason: Invalid
  
  - expression: "!has(object.spec.maxRetry) || object.spec.maxRetry >= 0"
    message: "'maxRetry' cannot be less than zero"
    reason: Invalid
  
  - expression: "!has(object.spec.ttlSecondsAfterFinished) || object.spec.ttlSecondsAfterFinished >= 0"
    message: "'ttlSecondsAfterFinished' cannot be less than zero"
    reason: Invalid
  
  # 2. Tasks Required - At least one task must be specified
  - expression: "size(variables.tasks) > 0"
    message: "No task specified in job spec"
    reason: Invalid
  
  # 3. Task Replicas Validation
  - expression: |
      variables.tasks.all(task, 
        has(task.replicas) && task.replicas >= 0
      )
    message: "task replicas must be >= 0"
    reason: Invalid
  
  # 4. Task MinAvailable Validation - Must be non-negative and <= replicas
  - expression: |
      variables.tasks.all(task,
        !has(task.minAvailable) || 
        (task.minAvailable >= 0 && task.minAvailable <= task.replicas)
      )
    message: "task minAvailable must be >= 0 and <= replicas"
    reason: Invalid
  
  # 5. Task MaxRetry Validation
  - expression: |
      variables.tasks.all(task,
        !has(task.maxRetry) || task.maxRetry >= 0
      )
    message: "task maxRetry must be >= 0"
    reason: Invalid
  
  # 6. Task Name Uniqueness
  - expression: "size(variables.taskNames) == size(variables.taskNames.unique())"
    message: "task names must be unique within a job"
    reason: Invalid
  
  # 7. Task Name Required and Non-Empty
  - expression: |
      variables.tasks.all(task,
        has(task.name) && size(task.name) > 0
      )
    message: "each task must have a non-empty name"
    reason: Invalid
  
  # 8. Task Template Required
  - expression: |
      variables.tasks.all(task,
        has(task.template) && has(task.template.spec)
      )
    message: "each task must have a template with spec"
    reason: Invalid
  
  # 9. Job MinAvailable vs Total Task Replicas
  - expression: |
      !has(object.spec.minAvailable) || 
      object.spec.minAvailable <= variables.tasks.map(task, task.replicas).sum()
    message: "job minAvailable cannot exceed total task replicas"
    reason: Invalid
  
  # 10. Queue Name Validation (Basic format check)
  - expression: |
      !has(object.spec.queue) || 
      (size(object.spec.queue) > 0 && 
       object.spec.queue.matches('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'))
    message: "queue name must be a valid Kubernetes name (lowercase alphanumeric with hyphens)"
    reason: Invalid
  
  # 11. SchedulerName Validation
  - expression: |
      !has(object.spec.schedulerName) || 
      size(object.spec.schedulerName) > 0
    message: "schedulerName cannot be empty when specified"
    reason: Invalid
  
  # 12. Task Policies Validation
  - expression: |
      variables.tasks.all(task,
        !has(task.policies) || 
        task.policies.all(policy,
          has(policy.event) && has(policy.action) &&
          policy.event in ['PodEvicted', 'PodFailed', 'TaskCompleted'] &&
          policy.action in ['RestartJob', 'AbortJob', 'CompleteJob']
        )
      )
    message: "task policies must have valid event and action values"
    reason: Invalid
  
  # 13. Volume Mount Path Validation
  - expression: |
      variables.tasks.all(task,
        !has(task.template.spec.containers) ||
        task.template.spec.containers.all(container,
          !has(container.volumeMounts) ||
          container.volumeMounts.all(mount,
            has(mount.mountPath) && size(mount.mountPath) > 0 &&
            mount.mountPath.startsWith('/')
          )
        )
      )
    message: "volume mount paths must be absolute paths starting with '/'"
    reason: Invalid

---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: job-validation-policy-binding
  labels:
    volcano.sh/component: job-webhook
    volcano.sh/migration: vap
spec:
  policyName: job-validation-policy
  validationActions: [Warn] # Start with Warn for gradual migration
  matchResources:
    namespaceSelector:
      matchExpressions:
      - key: name
        operator: NotIn
        values: ["kube-system", "kube-public", "kube-node-lease"]