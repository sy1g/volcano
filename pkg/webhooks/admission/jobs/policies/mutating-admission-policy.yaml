apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingAdmissionPolicy
metadata:
  name: job-mutation-policy
  labels:
    volcano.sh/component: job-webhook
    volcano.sh/migration: map
spec:
  failurePolicy: Fail
  matchConstraints:
  - resourceRules:
    - operations: ["CREATE", "UPDATE"]
      apiGroups: ["batch.volcano.sh"]
      apiVersions: ["v1alpha1"]
      resources: ["jobs"]
  mutations:
  # 1. Default Queue Assignment
  - target:
      group: batch.volcano.sh
      version: v1alpha1
      kind: Job
    patchType: strategic
    patches:
    - op: add
      path: /spec/queue
      value: "default"
      condition: "!has(object.spec.queue) || object.spec.queue == ''"
  
  # 2. Default Scheduler Name
  - target:
      group: batch.volcano.sh
      version: v1alpha1
      kind: Job
    patchType: strategic
    patches:
    - op: add
      path: /spec/schedulerName
      value: "volcano"
      condition: "!has(object.spec.schedulerName) || object.spec.schedulerName == ''"
  
  # 3. Default Max Retry
  - target:
      group: batch.volcano.sh
      version: v1alpha1
      kind: Job
    patchType: strategic
    patches:
    - op: add
      path: /spec/maxRetry
      value: 3
      condition: "!has(object.spec.maxRetry)"
  
  # 4. Default Min Available for Job
  - target:
      group: batch.volcano.sh
      version: v1alpha1
      kind: Job
    patchType: strategic
    patches:
    - op: add
      path: /spec/minAvailable
      value: 1
      condition: "!has(object.spec.minAvailable)"
  
  # 5. Task Name Generation for unnamed tasks
  - target:
      group: batch.volcano.sh
      version: v1alpha1
      kind: Job
    patchType: strategic
    patches:
    - op: replace
      path: /spec/tasks
      value: |
        has(object.spec.tasks) ? 
        object.spec.tasks.map(task, 
          has(task.name) && task.name != "" ? task : 
          task + {"name": "task-" + string(object.spec.tasks.indexOf(task))}
        ) : []
      condition: "has(object.spec.tasks) && object.spec.tasks.exists(task, !has(task.name) || task.name == '')"
  
  # 6. Task Default Min Available (equal to replicas if not specified)
  - target:
      group: batch.volcano.sh
      version: v1alpha1
      kind: Job
    patchType: strategic
    patches:
    - op: replace
      path: /spec/tasks
      value: |
        has(object.spec.tasks) ? 
        object.spec.tasks.map(task, 
          has(task.minAvailable) ? task : 
          task + {"minAvailable": task.replicas}
        ) : []
      condition: "has(object.spec.tasks) && object.spec.tasks.exists(task, !has(task.minAvailable))"
  
  # 7. Task Default Max Retry
  - target:
      group: batch.volcano.sh
      version: v1alpha1
      kind: Job
    patchType: strategic
    patches:
    - op: replace
      path: /spec/tasks
      value: |
        has(object.spec.tasks) ? 
        object.spec.tasks.map(task, 
          has(task.maxRetry) ? task : 
          task + {"maxRetry": 3}
        ) : []
      condition: "has(object.spec.tasks) && object.spec.tasks.exists(task, !has(task.maxRetry))"
  
  # 8. DNS Policy for Host Network
  - target:
      group: batch.volcano.sh
      version: v1alpha1
      kind: Job
    patchType: strategic
    patches:
    - op: replace
      path: /spec/tasks
      value: |
        has(object.spec.tasks) ? 
        object.spec.tasks.map(task, 
          has(task.template.spec.hostNetwork) && task.template.spec.hostNetwork && 
          (!has(task.template.spec.dnsPolicy) || task.template.spec.dnsPolicy == "") ?
          task + {"template": {"spec": task.template.spec + {"dnsPolicy": "ClusterFirstWithHostNet"}}} :
          task
        ) : []
      condition: |
        has(object.spec.tasks) && 
        object.spec.tasks.exists(task, 
          has(task.template.spec.hostNetwork) && 
          task.template.spec.hostNetwork && 
          (!has(task.template.spec.dnsPolicy) || task.template.spec.dnsPolicy == "")
        )

---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingAdmissionPolicyBinding
metadata:
  name: job-mutation-policy-binding
  labels:
    volcano.sh/component: job-webhook
    volcano.sh/migration: map
spec:
  policyName: job-mutation-policy
  matchResources:
    namespaceSelector:
      matchExpressions:
      - key: name
        operator: NotIn
        values: ["kube-system", "kube-public", "kube-node-lease"]